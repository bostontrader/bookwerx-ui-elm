module HttpLog.View exposing (view)

import Flash exposing (viewFlash)
import Html exposing (Html, button, div, h3, p, text)
import Html.Attributes exposing (class, style)
import Html.Events exposing (onClick)
import Model
import Msg exposing (Msg(..))
import Template exposing (template)
import Translate exposing (tx)


view : Model.Model -> Html Msg
view model =
    template model (leftContent model) (rightContent model)


leftContent : Model.Model -> Html Msg
leftContent model =
    div []
        [ p [ style "margin-top" "0.5em" ]
            [ text
                (tx model.language
                    { e = "This is a log of all HTTP requests generated by this app, during this session, as well as their associated results."
                    , c = "这里是此应用程序生成的所有HTTP请求及其相关结果的日志。"
                    , p = "zhèlǐ shì cǐ yìngyòng chéngxù shēngchéng de suǒyǒu HTTP qǐngqiú jí qí xiāngguān jiéguǒ de rìzhì."
                    }
                )
            ]
        ]


rightContent : Model.Model -> Html Msg
rightContent model =
    div []
        [ h3 [ class "title is-3" ] [ tx model.language { e = "HTTP Log", c = "HTTP的日志", p = "HTTP Log" } |> text ]
        , viewFlash model.flashMessages
        , button
            [ class "button is-link"
            , onClick ClearHttpLog
            ]
            [ tx model.language { e = "Clear", c = "删除", p = "shān chú" } |> text ]
        , div [] (viewLogEntries <| List.reverse <| model.http_log)
        ]


viewLogEntries : List String -> List (Html Msg)
viewLogEntries theLog =
    case List.length theLog of
        0 ->
            [ p [] [] ]

        -- empty
        1 ->
            [ p [] [ text "case 1" ] ]

        -- can we every have a request w/o a response?
        2 ->
            [ div [ class "box has-background-grey-lighter", style "margin-top" "0.5em" ]
                [ p [] [ text <| getMaybeString <| List.head <| theLog ]
                , p [] [ text <| getMaybeString <| List.head <| List.reverse <| theLog ]
                ]
            ]

        _ ->
            -- theLog _must have_ at least 2 items.
            let
                n2 =
                    case List.tail theLog of
                        Just n ->
                            n

                        Nothing ->
                            []

                n4 =
                    case List.tail n2 of
                        Just n ->
                            n

                        Nothing ->
                            []
            in
            div [ class "box has-background-grey-lighter", style "margin-top" "0.5em" ]
                [ p [] [ text <| getMaybeString <| List.head <| theLog ]
                , p [] [ text <| getMaybeString <| List.head <| n2 ]
                ]
                :: viewLogEntries n4


getMaybeString : Maybe String -> String
getMaybeString mbs =
    case mbs of
        Just s ->
            s

        Nothing ->
            "no string value"
